syntax = "proto3";
package threefoldtech.threefoldhub.multisigwallet;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "multisigwallet/params.proto";
import "multisigwallet/wallet.proto";
import "multisigwallet/transaction.proto";
import "multisigwallet/next_transaction.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/threefoldtech/threefold_hub/x/multisigwallet/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/threefoldtech/threefoldhub/multisigwallet/params";
  }
  // Queries a Wallet by index.
	rpc Wallet(QueryGetWalletRequest) returns (QueryGetWalletResponse) {
		option (google.api.http).get = "/threefoldtech/threefoldhub/multisigwallet/wallet/{index}";
	}

	// Queries a list of Wallet items.
	rpc WalletAll(QueryAllWalletRequest) returns (QueryAllWalletResponse) {
		option (google.api.http).get = "/threefoldtech/threefoldhub/multisigwallet/wallet";
	}

// Queries a Transaction by index.
	rpc Transaction(QueryGetTransactionRequest) returns (QueryGetTransactionResponse) {
		option (google.api.http).get = "/threefoldtech/threefoldhub/multisigwallet/transaction/{index}";
	}

	// Queries a list of Transaction items.
	rpc TransactionAll(QueryAllTransactionRequest) returns (QueryAllTransactionResponse) {
		option (google.api.http).get = "/threefoldtech/threefoldhub/multisigwallet/transaction";
	}

// Queries a NextTransaction by index.
	rpc NextTransaction(QueryGetNextTransactionRequest) returns (QueryGetNextTransactionResponse) {
		option (google.api.http).get = "/threefoldtech/threefoldhub/multisigwallet/next_transaction";
	}
// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetWalletRequest {
	  string index = 1;

}

message QueryGetWalletResponse {
	Wallet wallet = 1 [(gogoproto.nullable) = false];
}

message QueryAllWalletRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllWalletResponse {
	repeated Wallet wallet = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTransactionRequest {
	  string index = 1;

}

message QueryGetTransactionResponse {
	Transaction transaction = 1 [(gogoproto.nullable) = false];
}

message QueryAllTransactionRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTransactionResponse {
	repeated Transaction transaction = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetNextTransactionRequest {}

message QueryGetNextTransactionResponse {
	NextTransaction NextTransaction = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
